<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qianlong.qltt.zbas.mapper.TtagrpprotacmemMapper" >
  <resultMap id="BaseResultMap" type="com.qianlong.qltt.zbas.domain.Ttagrpprotacmem" >
    <id column="Fi_index" property="fiIndex" jdbcType="INTEGER" />
    <id column="Fs_tacgroup" property="fsTacgroup" jdbcType="VARCHAR" />
    <result column="Fs_tactic" property="fsTactic" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="ExtendResultMap" type="com.qianlong.qltt.zbas.domain.Ttagrpprotacmem" extends="BaseResultMap">
    <result column="Fs_name" property="fsName" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Fi_index, Fs_tacgroup, Fs_tactic
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qianlong.qltt.zbas.domain.TtagrpprotacmemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ttagrpprotacmem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.qianlong.qltt.zbas.domain.TtagrpprotacmemKey" >
    select 
    <include refid="Base_Column_List" />
    from ttagrpprotacmem
    where Fi_index = #{fiIndex,jdbcType=INTEGER}
      and Fs_tacgroup = #{fsTacgroup,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.qianlong.qltt.zbas.domain.TtagrpprotacmemKey" >
    delete from ttagrpprotacmem
    where Fi_index = #{fiIndex,jdbcType=INTEGER}
      and Fs_tacgroup = #{fsTacgroup,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.qianlong.qltt.zbas.domain.TtagrpprotacmemExample" >
    delete from ttagrpprotacmem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qianlong.qltt.zbas.domain.Ttagrpprotacmem" >
    insert into ttagrpprotacmem (Fi_index, Fs_tacgroup, Fs_tactic
      )
    values (#{fiIndex,jdbcType=INTEGER}, #{fsTacgroup,jdbcType=VARCHAR}, #{fsTactic,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qianlong.qltt.zbas.domain.Ttagrpprotacmem" >
    insert into ttagrpprotacmem
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="fiIndex != null" >
        Fi_index,
      </if>
      <if test="fsTacgroup != null" >
        Fs_tacgroup,
      </if>
      <if test="fsTactic != null" >
        Fs_tactic,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="fiIndex != null" >
        #{fiIndex,jdbcType=INTEGER},
      </if>
      <if test="fsTacgroup != null" >
        #{fsTacgroup,jdbcType=VARCHAR},
      </if>
      <if test="fsTactic != null" >
        #{fsTactic,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qianlong.qltt.zbas.domain.TtagrpprotacmemExample" resultType="java.lang.Integer" >
    select count(*) from ttagrpprotacmem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ttagrpprotacmem
    <set >
      <if test="record.fiIndex != null" >
        Fi_index = #{record.fiIndex,jdbcType=INTEGER},
      </if>
      <if test="record.fsTacgroup != null" >
        Fs_tacgroup = #{record.fsTacgroup,jdbcType=VARCHAR},
      </if>
      <if test="record.fsTactic != null" >
        Fs_tactic = #{record.fsTactic,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ttagrpprotacmem
    set Fi_index = #{record.fiIndex,jdbcType=INTEGER},
      Fs_tacgroup = #{record.fsTacgroup,jdbcType=VARCHAR},
      Fs_tactic = #{record.fsTactic,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qianlong.qltt.zbas.domain.Ttagrpprotacmem" >
    update ttagrpprotacmem
    <set >
      <if test="fsTactic != null" >
        Fs_tactic = #{fsTactic,jdbcType=VARCHAR},
      </if>
    </set>
    where Fi_index = #{fiIndex,jdbcType=INTEGER}
      and Fs_tacgroup = #{fsTacgroup,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qianlong.qltt.zbas.domain.Ttagrpprotacmem" >
    update ttagrpprotacmem
    set Fs_tactic = #{fsTactic,jdbcType=VARCHAR}
    where Fi_index = #{fiIndex,jdbcType=INTEGER}
      and Fs_tacgroup = #{fsTacgroup,jdbcType=VARCHAR}
  </update>
  
  <!-- 根据指原生指标组编号找到指标成员 -->
  <select id="selectMemsByFsTacgroup" resultMap="ExtendResultMap">
      select n.* ,a.Fs_name from  
        (select  Fi_index, Fs_tacgroup, Fs_tactic from ttagrpprotacmem where Fs_tacgroup = #{fsTacgroup,jdbcType=VARCHAR} ) n 
        left join ttadefprotactic a on n.Fs_tactic =a.Fs_tactic
        order by n.Fi_index asc
  </select>
  
  <!-- 根据指原生指标组编号找到指标成员 -->
  <select id="selectUnselectZB" resultMap="com.qianlong.qltt.zbas.mapper.TtadefprotacticMapper.BaseResultMap">
      select * from  ttadefprotactic
      <if test="grpcode != null and grpcode !=''">
        where Fs_tactic not in (select Fs_tactic from ttagrpprotacmem where Fs_tacgroup =#{grpcode,jdbcType=VARCHAR})
      </if>
  </select>
</mapper>